 kernel vec4 CreateEllipticalMaskKernel(sampler src, float rectX, float rectY, float /*majorRadius*/rectWidth, float /*minorRadius*/rectHeight, float transitionSize, float rotateAngle)
{
    vec4 pix = premultiply(sample(src, samplerCoord(src)));
    
    const vec2 xy = destCoord();
    
    float majorRadius = rectWidth / 2.0;
    float minorRadius = rectHeight / 2.0;
    
    float centerX = rectX + majorRadius;
    float centerY = rectY + minorRadius;
    
    float newX = centerX + (xy.x - centerX) * cos(rotateAngle) - (xy.y - centerY) * sin(rotateAngle);
    float newY = centerY + (xy.x - centerX) * sin(rotateAngle) + (xy.y - centerY) * cos(rotateAngle);   
    
    pix.r = ( ((newX - centerX) * (newX - centerX) / (majorRadius * majorRadius) + (newY - centerY) * (newY - centerY) / (minorRadius * minorRadius)) <= 1.0) ? 0.0 : ( ((newX - centerX) * (newX - centerX) / ((majorRadius + transitionSize) * (majorRadius + transitionSize)) + (newY - centerY) * (newY - centerY) / ((minorRadius + transitionSize) * (minorRadius + transitionSize))) <= 1.0) ? ((newX - centerX) * (newX - centerX) / ((majorRadius + transitionSize) * (majorRadius + transitionSize)) + (newY - centerY) * (newY - centerY) / ((minorRadius + transitionSize) * (minorRadius + transitionSize))) : 1.0;
    
    pix.g = pix.b = pix.r;
    
    return unpremultiply(pix);
}